<!-- ormd:0.1 -->
---
title: "Next Steps for Context Layer MVP"
authors: ["Jules"]
dates:
  created: '2025-09-18T20:37:00Z'
context:
  lineage:
    source: "jules-planning-session-2025-09-18"
    parent_docs:
      - "../cli-implementation-plan.md"
      - "../../progress updates/context-layer-mvp.ormd"
  resolution:
    confidence: "working"
status: "planning"
description: "A prioritized list of the next 5-7 tasks to implement the Context Layer MVP, moving from documentation to code."
---

# Next Tasks: Context Layer MVP Implementation

Based on a review of the existing documentation, the planning and specification phase of the Context Layer MVP is complete. The following tasks represent the next logical steps, focusing on implementing the planned features in the ORMD CLI.

## 1. Update YAML Parser and Validator
**Task**: Modify the core `ormd_cli` parser and validator to recognize the new `context` block.
**Reason**: This is the foundational step required for all other CLI features. The parser must be able to read the new fields without errors, and the validator needs to be updated to check them against the schema. This corresponds to "Phase 1" of the implementation plan.

## 2. Implement `ormd init` Enhancements
**Task**: Update the `ormd init` command to support the `--with-context`, `--confidence`, and `--source` flags as specified in the CLI plan.
**Reason**: This provides an immediate, user-facing way to start creating context-aware documents. It's a small, tangible feature that delivers value early and helps with testing the new parser.

## 3. Implement `ormd create --from-conversation`
**Task**: Create the new `ormd create --from-conversation` command.
**Reason**: This is a core feature of the MVP, directly addressing the "context handoff problem." It's a high-priority item in the CLI implementation plan and a key deliverable for the MVP.

## 4. Implement `ormd link` Command
**Task**: Create the new `ormd link` command to establish parent-child relationships between documents.
**Reason**: This feature is essential for building document lineage, which is a primary goal of the context layer. It allows users to programmatically connect related documents, making the context explicit and traceable.

## 5. Implement `ormd trace` Command
**Task**: Create the new `ormd trace` command to display document lineage.
**Reason**: This command makes the lineage data useful and accessible to the user. It allows for debugging and understanding the relationships between documents, providing a clear return on the effort of adding context metadata.

## 6. Archive Obsolete Spec Files
**Task**: Move the identified obsolete spec files (`spec0.1.md`, `spec0.1.ormd`, etc.) from the root directory to a new `docs/archive/` directory.
**Reason**: This will clean up the project's root directory, reducing confusion for new contributors and ensuring that everyone is referencing the single, correct spec document (`docs/spec-0.1-context-extension.ormd`).

## 7. Write Unit and Integration Tests
**Task**: Create comprehensive tests for all new and modified CLI commands and parsing logic.
**Reason**: As new functionality is added, it is critical to ensure it works as expected and does not introduce regressions. The implementation plan calls for a robust testing strategy, and this should be done in parallel with development.
